{"uid":"62f38ee838a3a439","name":"test_trade_license_extract_Ajman","fullName":"tests.test_trade_license_extract_Ajman#test_trade_license_extract_Ajman","historyId":"8af13ecdedb174796aeb0299f4208771","time":{"start":1753246849756,"stop":1753246850652,"duration":896},"status":"failed","statusMessage":"AssertionError: ❌ Failed: 403, {\"name\":\"ForbiddenError\",\"message\":\"Client is not allowed to access this service\",\"httpCode\":403}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"def test_trade_license_extract_Ajman():\n        client = APIClient()\n        file_path = os.path.join(os.path.dirname(__file__), \"DED-Ajman.pdf\")\n    \n        # Additional form-data fields\n        extra_fields = {\n            \"issuingAuthority\": \"Ajman Department of Economic Development\",\n            \"validateWithApi\": \"true\"\n        }\n    \n        try:\n            # Call API with extended timeout\n            response = client.post_file(\n                endpoint=\"/api/trade-license/extract\",\n                file_path=file_path,\n                extra_fields=extra_fields,\n                timeout=90  # seconds\n            )\n        except requests.exceptions.Timeout:\n            assert False, \"❌ API request timed out after 90 seconds\"\n    \n        # Assertions\n>       assert response.status_code == 200, f\"❌ Failed: {response.status_code}, {response.text}\"\nE       AssertionError: ❌ Failed: 403, {\"name\":\"ForbiddenError\",\"message\":\"Client is not allowed to access this service\",\"httpCode\":403}\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntests\\test_trade_license_extract_Ajman.py:27: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Failed: 403, {\"name\":\"ForbiddenError\",\"message\":\"Client is not allowed to access this service\",\"httpCode\":403}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"def test_trade_license_extract_Ajman():\n        client = APIClient()\n        file_path = os.path.join(os.path.dirname(__file__), \"DED-Ajman.pdf\")\n    \n        # Additional form-data fields\n        extra_fields = {\n            \"issuingAuthority\": \"Ajman Department of Economic Development\",\n            \"validateWithApi\": \"true\"\n        }\n    \n        try:\n            # Call API with extended timeout\n            response = client.post_file(\n                endpoint=\"/api/trade-license/extract\",\n                file_path=file_path,\n                extra_fields=extra_fields,\n                timeout=90  # seconds\n            )\n        except requests.exceptions.Timeout:\n            assert False, \"❌ API request timed out after 90 seconds\"\n    \n        # Assertions\n>       assert response.status_code == 200, f\"❌ Failed: {response.status_code}, {response.text}\"\nE       AssertionError: ❌ Failed: 403, {\"name\":\"ForbiddenError\",\"message\":\"Client is not allowed to access this service\",\"httpCode\":403}\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntests\\test_trade_license_extract_Ajman.py:27: AssertionError","steps":[],"attachments":[{"uid":"527e926f03241899","name":"stdout","source":"527e926f03241899.txt","type":"text/plain","size":816}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_trade_license_extract_Ajman"},{"name":"host","value":"LAPTOP-DLCP2JCN"},{"name":"thread","value":"14056-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_trade_license_extract_Ajman"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"62f38ee838a3a439.json","parameterValues":[]}